// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  userName   String      @map("user_name") // 로그인 시 아이디
  password   String
  name       String      @db.VarChar(50)  // 사용자 이름
  comments   Comment[]
  postLikes  PostLike[]  
  posts      Post[]
  userGroups UserGroup[] 

  @@map("users")
}

model Group {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(255)
  description String?
  createdAt   DateTime    @default(now()) @map("created_at")
  posts       Post[]
  userGroups  UserGroup[] 

  @@map("groups")
}

model UserGroup {
  id      Int    @id @default(autoincrement())
  userId  Int    @map("user_id")
  groupId Int    @map("group_id")
  role    String @default("member")
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("user_groups")
}

model Post {
  id         Int        @id @default(autoincrement())
  userId     Int        @map("user_id")
  groupId    Int        @map("group_id")
  title      String     @db.VarChar(255)
  content    String
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime?  @map("updated_at")
  comments   Comment[]
  postLikes  PostLike[] 
  group      Group      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model PostLike {
  id     Int   @id @default(autoincrement())
  postId Int   @map("post_id")
  userId Int   @map("user_id")
  post   Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("post_likes")
}

model Comment {
  id        Int        @id @default(autoincrement())
  postId    Int        @map("post_id")
  userId    Int        @map("user_id")
  content   String
  parentId  Int?       @map("parent_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime?  @map("updated_at")
  parent    Comment?   @relation("replies", fields: [parentId], references: [id], onDelete: Cascade)
  children  Comment[]  @relation("replies")
  post      Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}
